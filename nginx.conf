server {
    listen 8080;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Character encoding for multi-language support
    charset utf-8;

    # Enhanced Gzip compression for better performance
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript application/ld+json image/svg+xml;
    gzip_disable "msie6";

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/json application/javascript application/ld+json image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # SEO-friendly headers
    add_header Content-Language "ko, en, ja, es, zh, pt, th, vi" always;
    add_header Vary "Accept-Encoding, Accept-Language" always;

    # CORS headers for multi-language assets
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type, Accept-Language" always;

    # Cache translation JSON files with short TTL for updates
    location ~* ^/locales/.*\.json$ {
        add_header Content-Type application/json;
        add_header Cache-Control "public, max-age=3600";
        add_header Access-Control-Allow-Origin "*";
        expires 1h;
    }

    # Cache static assets with versioning support
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot|webp)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;

        # Enable CORS for fonts and images
        add_header Access-Control-Allow-Origin "*";
    }

    # Sitemap and robots.txt - Important for SEO
    location = /sitemap.xml {
        add_header Content-Type application/xml;
        add_header X-Robots-Tag "noindex, follow";
        expires 1d;
    }

    location = /robots.txt {
        add_header Content-Type text/plain;
        expires 1d;
    }

    # Serve ads.txt directly (no SPA fallback)
    location = /ads.txt {
        expires 1h;
        add_header Cache-Control "public";
    }

    # Favicon handling
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 1y;
    }

    location = /favicon.svg {
        access_log off;
        expires 1y;
    }

    # Service worker support for PWA
    location = /service-worker.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        expires 0;
    }

    # Manifest for PWA
    location = /manifest.json {
        add_header Content-Type application/manifest+json;
        expires 1d;
    }

    # Main SPA fallback with SEO-friendly redirects
    location / {
        # Preserve query strings for language and calculator params
        try_files $uri $uri/ /index.html?$args;

        # Add cache control for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        expires 0;
    }

    # Prerender support for SEO bots (optional - if using prerender.io)
    # set $prerender 0;
    # if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
    #     set $prerender 1;
    # }
    # if ($args ~ "_escaped_fragment_") {
    #     set $prerender 1;
    # }
    # if ($http_user_agent ~ "Prerender") {
    #     set $prerender 0;
    # }
    # if ($prerender = 1) {
    #     rewrite .* /prerender/$scheme://$host$request_uri? break;
    #     proxy_pass http://service.prerender.io;
    # }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /index.html;
}
